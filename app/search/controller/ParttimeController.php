<?php


//命名空间
namespace app\search\controller;

use app\validate\MemberValidate;
use app\logic\AliOssLogic;
use app\space\model\SpaceModel;
use app\third\AliModel;
use app\validate\ParttimeValidate;
use think\Db;
use think\facade\Validate;
use cmf\controller\HomeBaseController;
use app\user\model\UserModel;


class ParttimeController extends HomeBaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->token = $this->request->patch('token');

        //判断token的传值
        if (isset($_SERVER["HTTP_TOKEN"])) {
            $this->user = $this->check_user_login($_SERVER["HTTP_TOKEN"]);//验证用户
        } else {
            $this->user = $this->check_user_login($this->token); //验证用户
        }
        if (!$this->user) {
            $this->ajaxResult(-1, '请登录后再试!');
        }
    }


    public function FullOrder()
    {

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where('boss_id', $this->user['user_id'])
            ->field('p.worker_name,p.title,m.avatar,p.starttime,p.working_status,p.id,p.money')
            ->paginate($this->pageSize, false, ['page' => $this->currentPage])
            ->toArray();

//        foreach ($re as $k=>$v){
//
//            if ($re[$k]['working_status'] == 3 ) {
//
//                $re[$k]['money'] = Db::table('cmf_parttime')->where('boss_id',$this->user['user_id'])->find()['money'];
//            }
//
//
//        }

        $this->ajaxResult(1, '请求成功', $re);
    }


    /*
    * 临时工 - 雇主 - 首页
   */

    public function boss_num()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 1];

        $re['accept_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 1])->count();
        $accept_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 1, 'read_status' => 0])->count();
        $accept_read > 0 ? $re['$accept_read'] = 1 : $re['accept_read'] = 0;

        $re['payment_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 2])->count();
        $payment_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 2, 'read_status' => 0])->count();
        $payment_read > 0 ? $re['payment_read'] = 1 : $re['payment_read'] = 0;

        $re['appointmen_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 3])->count();
        $appointmen_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 3, 'read_status' => 0])->count();
        $appointmen_read > 0 ? $re['appointmen_read'] = 1 : $re['appointmen_read'] = 0;

        $re['conduct_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 4])->count();
        $conduct_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 4, 'read_status' => 0])->count();
        $conduct_read > 0 ? $re['conduct_read'] = 1 : $re['conduct_read'] = 0;

        $re['evaluate_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 5])->count();
        $evaluate_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 5, 'read_status' => 0])->count();
        $evaluate_read > 0 ? $re['evaluate_read'] = 1 : $re['evaluate_read'] = 0;

        $re['refund_num'] = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 6])->count();
        $refund_read = Db::table('cmf_parttime')->where(['boss_id' => $this->user['user_id'], 'working_status' => 6, 'read_status' => 0])->count();
        $refund_read > 0 ? $re['refund_read'] = 1 : $re['refund_read'] = 0;


        $this->ajaxResult(1, '请求成功', $re);
    }


    /*
     * 临时工 - 临时工 - 首页
    */

    public function worker_num()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 1];

        $re['accept_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 1])->count();
        $accept_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 1, 'read_status' => 0])->count();
        $accept_read > 0 ? $re['$accept_read'] = 1 : $re['accept_read'] = 0;

        $re['payment_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 2])->count();
        $payment_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 2, 'read_status' => 0])->count();
        $payment_read > 0 ? $re['payment_read'] = 1 : $re['payment_read'] = 0;

        $re['appointmen_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 3])->count();
        $appointmen_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 3, 'read_status' => 0])->count();
        $appointmen_read > 0 ? $re['appointmen_read'] = 1 : $re['appointmen_read'] = 0;

        $re['conduct_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 4])->count();
        $conduct_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 4, 'read_status' => 0])->count();
        $conduct_read > 0 ? $re['conduct_read'] = 1 : $re['conduct_read'] = 0;

        $re['evaluate_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 5, 'worker_status'=>0])->count();
        $evaluate_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 5, 'read_status' => 0])->count();
        $evaluate_read > 0 ? $re['evaluate_read'] = 1 : $re['evaluate_read'] = 0;

        $re['refund_num'] = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 6])->count();
        $refund_read = Db::table('cmf_parttime')->where(['worker_id' => $this->user['user_id'], 'working_status' => 6, 'read_status' => 0])->count();
        $refund_read > 0 ? $re['refund_read'] = 1 : $re['refund_read'] = 0;


        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
     * 临时工 - 临时工
     */

    public function worker()
    {
        $type = $this->request->param('type/d', 0);
        $port = $this->request->param('port/d', 0); //0雇主  1临时工
        $where['working_status'] = $type;
        if ($port) { //1临时工
            $where ['worker_id'] = $this->user['user_id'];
        } else {
            $where ['boss_id'] = $this->user['user_id'];
        }
        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->select();
        $this->ajaxResult(1, '请求成功', $re);
    }


    /*
     * 临时工 - 临时工 - 待接受
     */

    public function worker_accept()
    {
        $data = $this->request->param();
        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 1];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
    * 临时工 - 临时工 - 查看订单
    */

    public function look_parttime()
    {

        $id = $this->request->param('id'); // 兼职id

        $where = ['worker_id' => $this->user['user_id'], 'p.id' => $id];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m ', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.phone,p.address,p.hope,p.money,p.id,p.boss_id,m.avatar')
            ->find();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
    * 临时工 - 临时工 - 修改价格
    */

    public function modify_price()
    {

        $data = $this->request->param();

        if (empty($data['money'])) {

            $this->ajaxResult(-1, '没有输入修改价格');
        }

        $id = $this->request->param('id/d'); //兼职id

        $up['money'] = $data['money'];


        $re = Db::table('cmf_parttime')->where('id', $id)->update($up);


        $re > 0 ? $this->ajaxResult(1, '修改成功!') : $this->ajaxResult(-1, '请不要重复提交!');
    }

    /*
    * 临时工 - 临时工 - 拒绝订单
    */
    public function refuse_job()
    {
        $data = $this->request->param();
        $id = $this->request->param('job_id/d', 0); //兼职id
        $up['working_status'] = 7;
        $re = Db::table('cmf_parttime')->where('id', $id)->update($up);
        if($re === false) $this->ajaxResult(1, '提交失败!');
        $this->ajaxResult(1, '成功!');
    }


    /*
    * 临时工 - 临时工 - 接受订单
    */
    public function accept_orders()
    {
        $data = $this->request->param();
        $user = $this->user;
        $id = $this->request->param('job_id/d', 0); //兼职id
        if(!$id || $id <= 0) $this->ajaxResult(-1, '参数错误');
        $up['working_status'] = 2;
        $re = Db::table('cmf_parttime')->where(['id'=>$id])->update($up);
        if(false === $re) $this->ajaxResult(-1, '接受订单失败!');
        $this->ajaxResult(1, '接受订单成功!');
    }

    /*
   * 临时工 - 临时工 - 待付款
   */

    public function worker_payment()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 2];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }

    /*
  * 临时工 - 临时工 - 已预约
  */

    public function worker_appointmen()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 3];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.money,refund_type')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }

    /*
    * 临时工 - 临时工 - 进行中
    */

    public function worker_conduct()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 4];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.money,refund_type')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }

    /**
     * 凭证列表
     */
    public function partTimeVoucher()
    {
        $param = $this->request->param();
        $errorInfo = (new ParttimeValidate())->goCheck('partTimeVoucher');
        if ($errorInfo !== true) $this->ajaxResult(-1, $errorInfo['msg'], $errorInfo['data']);

        $job = Db::name('parttime p')->join('member m', ['p.boss_id = m.id'])->where(['p.id' => $param['job_id']])->field(['p.*', 'm.user_nickname', '1 as is_img'])->find();
        if (empty($job)) $this->ajaxResult(-1, '订单不存在');

        $data = Db::name('parttime_voucher')->where([
            'people_id' => $this->user['user_id'],
            'job_id' => $param['job_id']
        ])->order(['id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();
        $data = $data ? $data : [];
        if (!empty($data['data'])) {
            foreach ($data['data'] as $k => $val) {
                if (!empty($val['show_picture'])) {
                    if ('txt' == pathinfo($val['show_picture'])['extension']) {
                        $data['data'][$k]['is_img'] = 0;
                    }
                }
            }
        }

        $this->ajaxResult(1, 'success', $data);
    }

    /**
     * 雇主再修改
     * @throws \think\Exception
     */
    public function modifyAgain()
    {

        $param = $this->request->param();
        $errorInfo = (new ParttimeValidate())->goCheck('modifyAgain');
        if ($errorInfo !== true) $this->ajaxResult(-1, $errorInfo['msg'], $errorInfo['data']);

        $job = Db::name('parttime p')->join('member m', ['p.boss_id = m.id'])->where(['p.id' => $param['job_id']])->field(['p.*', 'm.user_nickname'])->find();
        if (empty($job)) $this->ajaxResult(-1, '订单不存在');
        if ($job['working_status'] != 4) $this->ajaxResult(-1, '只有进行中的兼职能要求再次修改凭证');

        $file = Db::name('parttime_voucher')->where([
            'id' => $param['file_id'],
            'job_id' => $param['job_id']
        ])->find();
        if (empty($file)) $this->ajaxResult(-1, '凭证不存在');
        if ($file['is_edit'] == 1) $this->ajaxResult(-1, '该凭证已要求再次修改');

        $res = Db::name('parttime_voucher')->where([
            'id' => $param['file_id'],
            'job_id' => $param['job_id']
        ])->update([
            'is_edit' => 1
        ]);
        if (!$res) $this->ajaxResult(-1, '修改失败');
        $this->ajaxResult(1, 'success');
    }

    /**
     * 修改凭证
     */
    public function editVoucher()
    {
        $param = $this->request->param();
        $errorInfo = (new ParttimeValidate())->goCheck('editVoucher');
        if ($errorInfo !== true) $this->ajaxResult(-1, $errorInfo['msg'], $errorInfo['data']);

        $job = Db::name('parttime p')->join('member m', ['p.boss_id = m.id'])->where(['p.id' => $param['job_id']])->field(['p.*', 'm.user_nickname'])->find();
        if (empty($job)) $this->ajaxResult(-1, '订单不存在');
        if ($job['working_status'] != 4) $this->ajaxResult(-1, '只有进行中的兼职能上传凭证');

        $file = Db::name('parttime_voucher')->where([
            'people_id' => $this->user['user_id'],
            'job_id' => $param['job_id'],
            'id' => $param['file_id']
        ])->find();

        if (empty($file)) $this->ajaxResult(-1, '凭证不存在');
        if ($file['is_edit'] == 1) $this->ajaxResult(-1, '该凭证已无法修改');
        $link = $file['show_picture'];
        $sizes = $oldSize = $file['size'];
        $fileItem = $file['show_picture'];

        if ($param['is_upFile'] == 1) {
            // 检查空间
            $files = request()->file('show_picture');
            if (empty($files)) $this->ajaxResult(-1, '文件不能为空');
            $size = $files->getSize();

            $sub = $sizes - $size;
            if ($sub > 0) {
                $spaceModel = new SpaceModel();
                $check = $spaceModel->check_user_space($this->user['user_id'], $sub);
                if ($check !== true) $this->ajaxResult(-1, $check['msg'], $check['data']);
            }

            // 上传aliyun
            $aliOssLogic = new AliOssLogic();
            $fileItem = $aliOssLogic->uploadFileToAli($files)[0];
            $file_name = $files->getInfo()['name'];
            if (empty($fileItem)) $this->ajaxResult(-1, '文件上传失败，请重试');
            $sizes = $size;
        }

        try {
            Db::startTrans();

            $update = Db::name('parttime_voucher')->where([
                'people_id' => $this->user['user_id'],
                'job_id' => $param['job_id'],
                'id' => $param['file_id']
            ])->update([
                'show_picture' => $fileItem,
                'size' => $sizes,
                'remarks' => isset($param['remarks']) ? $param['remarks'] : $file['remarks']
            ]);
            if (false === $update) throw new \Exception('parttime_voucher table update fail', 100612);

            if ($param['is_upFile'] == 1) {
                $spaces = Db::name('space')->where([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 0
                ])->find();

                $result = Db::name('space')->where([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 0
                ])->update([
                    'used_space' => (($spaces['used_space'] - $oldSize) + $sizes),
                    'is_remind' => 1,
                    'update_time' => time()
                ]);
                if (false === $result) throw new \Exception('space table insert fail', 100613);

                $detail = Db::name('space_details')->where([
                    'space_id' => $spaces['id'],
                    'link' => $link
                ])->find();
                if (empty($detail)) {
                    $res = Db::name('space_details')->insert([
                        'space_id' => $spaces['id'],
                        'link' => $fileItem,
                        'name' => isset($file_name) ? $file_name : $file['remarks'],
                        'stage' => $file['stage'],
                        'used_space' => $sizes,
                        'remarks' => isset($param['remarks']) ? $param['remarks'] : $file['remarks'],
                        'create_time' => time(),
                        'update_time' => time()
                    ]);
                    if (false === $res) throw new \Exception('space_details table update fail', 100614);
                } else {
                    $res = Db::name('space_details')->where([
                        'space_id' => $spaces['id'],
                        'link' => $link
                    ])->update([
                        'name' => isset($file_name) ? $file_name : $file['remarks'],
                        'used_space' => $sizes,
                        'remarks' => isset($param['remarks']) ? $param['remarks'] : $file['remarks'],
                        'update_time' => time()
                    ]);
                    if (false === $res) throw new \Exception('space_details table update fail', 100614);
                }

                $user = Db::name('member_space')->where(['user_id' => $this->user['user_id']])->find();
                $r = Db::name('member_space')->where([
                    'user_id' => $this->user['id'],
                ])->update([
                    'used_space' => (($user['used_space'] - $oldSize) + $sizes),
                    'update_time' => time()
                ]);
                if (false === $r) throw new \Exception('member_space table update fail', 100616);
            }

            Db::commit();
            $this->ajaxResult(1, '上传成功');
        } catch (\Exception $e) {
            Db::rollback();
            $this->ajaxResult(-1, '保存失败请重新提交', $e->getMessage());
        }
    }

    /*
    * 临时工 - 临时工  -  上传凭证
    */
    public function upVoucher()
    {
        $data = $this->request->param();
        $errorInfo = (new ParttimeValidate())->goCheck('upVoucher');
        if ($errorInfo !== true) $this->ajaxResult(-1, $errorInfo['msg'], $errorInfo['data']);

        $job = Db::name('parttime p')->join('member m', ['p.boss_id = m.id'])->where(['p.id' => $data['job_id']])->field(['p.*', 'm.user_nickname'])->find();
        if (empty($job)) $this->ajaxResult(-1, '订单不存在');
        if ($job['working_status'] != 4) $this->ajaxResult(-1, '只有进行中的兼职能上传凭证');

        // 每个阶段只有一个凭证
//        $file = Db::name('parttime_voucher')->where([
//            'people_id' => $this->user['user_id'], // 临时工id
//            'job_id' => $data['job_id'],
//            'is_edit' => 0
//        ])->find();
//        if (!empty($file)) $this->ajaxResult(-1, '只能上传一个凭证');

        // 检查空间
        $files = request()->file('show_picture');

//        if (empty($files)) $this->ajaxResult(-1, '文件不能为空');
        $fileItem = '';
        $file_name = date('Y-m-d H:i:s').'文本消息';
        $size = 0;
        if (!empty($files)) {
            $size = $files->getSize();
            $spaceModel = new SpaceModel();
            $check = $spaceModel->check_user_space($this->user['user_id'], $size);
            if ($check !== true) $this->ajaxResult(-1, $check['msg'], $check['data']);

            // 上传aliyun
            $aliOssLogic = new AliOssLogic();
            $fileItem = $aliOssLogic->uploadFileToAli($files)[0];
            $file_name = $files->getInfo()['name'];
            if (empty($fileItem)) $this->ajaxResult(-1, '文件上传失败，请重试');
        }

        // 取得最大凭证阶段
        $stage = Db::name('parttime_voucher')->where([
            'people_id' => $this->user['user_id'], // 临时工id
            'job_id' => $data['job_id'],
            'is_edit' => 1
        ])->order('stage', 'desc')->value('stage');
        $stage = $stage + 1;

        try {
            Db::startTrans();

            $insert = Db::name('parttime_voucher')->insert([
                'people_id' => $this->user['user_id'], // 临时工id
                'job_id' => $data['job_id'],
                'show_picture' => $fileItem,
                'size' => $size,
                'stage' => $stage,
                'remarks' => isset($data['remarks']) ? $data['remarks'] : '',
                'create_time' => time() //创建时间
            ]);
            if (!$insert) throw new \Exception('parttime_voucher table insert fail', 100612);

            $spaces = Db::name('space')->where([
                'user_id' => $this->user['id'],
                'job_id' => $job['id'],
                'boss_id' => $job['boss_id'],
                'boss_name' => $job['user_nickname'],
                'type' => 0
            ])->find();
            if (empty($spaces)) {
                $result = Db::name('space')->insert([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 0,
                    'used_space' => $size,
                    'is_remind' => 1,
                    'create_time' => time(),
                    'update_time' => time()
                ]);
                if (!$result) throw new \Exception('space table insert fail', 100613);
                $spaces = Db::name('space')->where([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 0
                ])->find();
            } else {
                $result = Db::name('space')->where([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 0
                ])->update([
                    'used_space' => ($spaces['used_space'] + $size),
                    'is_remind' => 1,
                    'update_time' => time()
                ]);
                if (false === $result) throw new \Exception('space table insert fail', 100613);
            }

            $space = Db::name('space')->where([
                'user_id' => $this->user['id'],
                'job_id' => $job['id'],
                'boss_id' => $job['boss_id'],
                'boss_name' => $job['user_nickname'],
                'type' => 1
            ])->find();
            if (empty($space)) {
                $res = Db::name('space')->insert([
                    'user_id' => $this->user['id'],
                    'job_id' => $job['id'],
                    'boss_id' => $job['boss_id'],
                    'boss_name' => $job['user_nickname'],
                    'type' => 1,
                    'used_space' => 0,
                    'is_remind' => 0,
                    'create_time' => time(),
                    'update_time' => time()
                ]);
                if (!$res) throw new \Exception('space table insert fail', 100613);
            }

            $detail = Db::name('space_details')->insert([
                'space_id' => $spaces['id'],
                'name' => $file_name,
                'stage' => $stage,
                'used_space' => $size,
                'link' => $fileItem,
                'remarks' => isset($data['remarks']) ? $data['remarks'] : '',
                'is_addhistory' => 0,
                'create_time' => time(),
                'update_time' => time()
            ]);
            if (!$detail) throw new \Exception('space_details table insert fail', 100614);

            $user = Db::name('member_space')->where(['user_id' => $this->user['user_id']])->find();
            if (empty($user)) {
                $r = Db::name('member_space')->insert([
                    'user_id' => $this->user['id'],
                    'used_space' => $size,
                    'create_time' => time(),
                    'update_time' => time()
                ]);
                if (!$r) throw new \Exception('member_space table insert fail', 100615);
            } else {
                $r = Db::name('member_space')->where([
                    'user_id' => $this->user['id'],
                ])->update([
                    'used_space' => ($user['used_space'] + $size),
                    'update_time' => time()
                ]);
                if (false === $r) throw new \Exception('member_space table update fail', 100616);
            }

            Db::commit();
            $this->ajaxResult(1, '上传成功');
        } catch (\Exception $e) {
            Db::rollback();
            $this->ajaxResult(-1, '保存失败请重新提交', $e->getMessage());
        }
    }

    /*
    * 临时工 - 临时工  -  进度详情
    */
    public function setbacks()
    {
        $id = $this->request->param('id/d');
        $part_time = Db::table('cmf_parttime')->where(['id' => $id, 'working_status' => 4])->field(['money', 'starttime', 'modify_pay', 'modify_time'])->find();
        if ($part_time['modify_pay']) {
            $single_money = $part_time['money'] / $part_time['modify_time'];
            if (!$part_time) $this->ajaxResult(-1, '此工作不存在');
            $stage = Db::table('cmf_parttime_voucher')
                ->alias('pv')
                ->where(['pv.job_id' => $id, 'pv.people_id' => $this->user['user_id']])
                ->field(["{$single_money} as single_money", "(pv.stage-1) as stage", "pv.id"])
                ->order('stage')
                ->limit(1, 9999999999)
                ->select()
                ->toArray();
        } else {
            if (!$part_time) $this->ajaxResult(-1, '此工作不存在');
            $stage = Db::table('cmf_parttime_voucher')
                ->alias('pv')
                ->where(['pv.job_id' => $id, 'pv.people_id' => $this->user['user_id']])
                ->field(['0 as single_money', "(pv.stage-1) as stage", "pv.id"])
                ->order('stage')
                ->limit(1, 9999999999)
                ->select()
                ->toArray();
        }

        $this->ajaxResult(1, '成功', ['part_time' => $part_time, 'stage' => $stage]);
    }


    /*
    * 临时工 - 临时工  -  退款详情
    */
    public function RefundDetails()
    {
        $job_id = $this->request->param('job_id/d');

        $re = Db::table('cmf_parttime_refund')
            ->alias('r')
            ->join('cmf_member m', 'r.boss_id = m.id', 'LEFT')
            ->field('m.avatar,r.title,r.boss_name,r.title,r.money,r.refund_type,r.details,r.picture,r.job_id')
            ->where('job_id', $job_id)
            ->find();

        if (!empty($re['picture'])) {

            $re['picture'] = json_decode($re['picture']);
        } else {

            $re['picture'] = [];
        }

        $this->ajaxResult(1, '请求成功', $re);
    }


    /*
   * 临时工 - 临时工  -  退款操作
   */
    public function Button()
    {
        $param = $this->request->param();

        $job_id = $this->request->param('job_id/d');

        $type = $this->request->param('type/d');

        if ($type == 1) {
            Db::table('cmf_parttime')->where('id', $job_id)->update(['working_status' => 6]);
            $this->ajaxResult(1, '退款成功');
        } elseif ($type == 2) {
            Db::table('cmf_parttime')->where('id', $job_id)->update(['working_status' => 4]);
            Db::table('cmf_parttime_refund')->where('id', $job_id)->update(['type' => 3]);
            $this->ajaxResult(1, '拒绝退款成功');
        }

    }


    /*
   * 临时工 - 临时工 - 待评价
   */

    public function worker_evaluate()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 5, 'worker_status' => 0];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.boss_id,p.worker_id,p.money')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }


    /*
  * 临时工 - 临时工 - 评价
  */
    public function evaluate()
    {
        $data = $this->request->param();
        if (empty($data['content'])) {
            $this->ajaxResult(-1, '评论内容不能为空');
        }
        if (empty($data['service_rank'])) {
            $this->ajaxResult(-1, '请选择等级');
        }
        $r = Db::table('cmf_member')->where('id', $this->user['user_id'])->field('user_nickname,avatar')->find();

        $insert_data = array(
            'user_id' => $this->user['user_id'],//用户id
            'avatar' => $r['avatar'],//用户头像
            'user_nickname' => $r['user_nickname'],//用户昵称
            'reply_id' => $data['reply_id'],//被评论用户id   9
            'job_id' => $data['job_id'],//被评论工作id    14
            'content' => $data['content'],//评论内容
            'add_time' => time(),//创建时间
            'profession' => $data['profession'],//工种
            'ip_address' => get_client_ip(0, true),//用户ip
            'img' => isset($data['picture'])?json_encode($data['picture']):'',//证明图片
            'service_rank' => $data['service_rank'],//等级
            'type' => 2,//身份
        );

        Db::table('cmf_parttime')->where('id', $data['job_id'])->update(array('worker_status' => 1));

        $do_insert = Db::table('cmf_job_comment')->insert($insert_data);
        if ($do_insert > 0) {
            $this->ajaxResult(1, '评论成功');
        } else {
            $this->ajaxResult(-1, '评论失败');
        }
    }


    /*
    * 临时工 - 临时工 - 已退款
    */

    public function worker_refund()
    {

        $data = $this->request->param();

        $where = ['worker_id' => $this->user['user_id'], 'working_status' => 6];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.boss_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.boss_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);


    }

    /*
     * 临时工 - 雇主 - 待接受
     */
    public function boss_accept()
    {
        $data = $this->request->param();
        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 1];
        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->order(['p.id'=>'desc'])
            ->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
    * 临时工 - 雇主 - 取消订单统一接口
    */
    public function boss_refuse()
    {
        $user = $this->user;
        $id = $this->request->param('job_id/d', 0); //兼职id
        $ex = Db::name('parttime')->where(['id'=>$id, 'boss_id'=>$user['user_id']])->find();
        if(empty($ex)) $this->ajaxResult(-1, '订单不存在');
        $re = Db::name('parttime')->where(['id'=>$id])->update(['working_status'=>7]);
        if(false === $re) $this->ajaxResult(-1, '取消订单失败!');
        $this->ajaxResult(1, '取消订单成功!');
    }

    /*
    * 临时工 - 雇主 - 查看订单
    */
    public function boss_parttime()
    {
        $id = $this->request->param('id'); //兼职id
        $boss_avatar = Db::table('cmf_member')->where('id', $this->user['user_id'])->field('avatar')->find();
        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where('p.id', $id)
            ->field('p.boss_name,p.title,p.starttime,p.phone,p.address,p.hope,p.money,p.id,m.avatar as worker_avatar,p.worker_name,p.working_status')
            ->find();

        $re['boss_avatar'] = $boss_avatar['avatar'];
        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
    * 临时工 - 雇主 - 待付款
    */
    public function boss_payment()
    {
        $data = $this->request->param();
        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 2];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.money')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
    * 临时工 - 雇主 - 已预约
    */
    public function boss_appointmen()
    {
        $data = $this->request->param();
        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 3];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.money,refund_type')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
   * 临时工 - 雇主 - 进行中
   */

    public function boss_conduct()
    {

        $data = $this->request->param();

        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 4];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.money,p.worker_id,refund_type')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }

    //查看凭证
    public function lookVoucher()
    {

        $data = $this->request->param();
        $errorinfo = (new MemberValidate())->goCheck('lookVoucher1', $data);
        if ($errorinfo !== true) $this->ajaxResult(-1, $errorinfo['msg'], $errorinfo['data']);

        $data['job_id'] = $this->request->param('job_id');
        $data['worker_id'] = $this->request->param('worker_id');

        $where = ['job_id' => $data['job_id'], 'people_id' => $data['worker_id']];

        $info = Db::table('cmf_parttime_voucher')->where($where)->select();


        if ($info) {
            $this->ajaxResult(1, '请求成功', $info);
        }
        $this->ajaxResult(-1, '没有数据');

    }


    /*
   * 临时工 - 雇主 - 待评价
   */

    public function boss_evaluate()
    {

        $data = $this->request->param();

        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 5];

        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar,p.boss_id,p.worker_id,p.money,p.boss_status')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);

    }


    /*
    * 临时工 - 雇主 - 评价
    */
    public function PublishEvaluate()
    {
        $data = $this->request->param();
        if (empty($data['content'])) {
            $this->ajaxResult(-1, '评论内容不能为空');
        }
        if (empty($data['service_rank'])) {
            $this->ajaxResult(-1, '请选择等级');
        }
        $r = Db::table('cmf_member')->where('id', $this->user['user_id'])->field('user_nickname,avatar')->find();

        $insert_data = array(
            'user_id' => $this->user['user_id'],//用户id
            'avatar' => $r['avatar'],//用户头像
            'user_nickname' => $r['user_nickname'],//用户昵称
            'reply_id' => $data['reply_id'],//被评论用户id   8
            'job_id' => $data['job_id'],//被评论工作id    7
            'content' => $data['content'],//评论内容
            'add_time' => time(),//创建时间
            'profession' => $data['profession'],//工种
            'ip_address' => get_client_ip(0, true),//用户ip
            'img' => isset($data['picture'])?json_encode($data['picture']):'',//证明图片
            'service_rank' => $data['service_rank'],//等级
            'type' => 1,//身份
        );

        $boss_status = Db::table('cmf_parttime')->where('id', $data['job_id'])->update(array('boss_status' => 1, 'working_status' => 7));

        $do_insert = Db::table('cmf_job_comment')->insert($insert_data);
        if ($do_insert > 0 && $boss_status > 0) {
            $this->ajaxResult(1, '评论成功');
        } else {
            $this->ajaxResult(-1, '评论失败');
        }
    }


    /*
    * 临时工 - 雇主 - 已退款
    */

    public function boss_refund()
    {
        $data = $this->request->param();
        $where = ['boss_id' => $this->user['user_id'], 'working_status' => 6];
        $re = Db::table('cmf_parttime')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where($where)
            ->field('p.worker_name,p.title,p.starttime,p.working_status,p.id,m.avatar')->order(['p.id'=>'desc'])->paginate($this->pageSize, false, ['page' => $this->currentPage])->toArray();

        $this->ajaxResult(1, '请求成功', $re);
    }

    /*
     * 临时工 - 雇主 - 退款页面
     */
    public function Refundpage()
    {
        $data = $this->request->param();
        $errorinfo = (new MemberValidate())->goCheck('working_status', $data);
        if ($errorinfo !== true) $this->ajaxResult(-1, $errorinfo['msg'], $errorinfo['data']);

        //查看兼职信息

        $parttime = Db::table('cmf_parttime')->where('id', $data['job_id'])->field('worker_name,money,title,id')->find();
        $this->ajaxResult(1, '请求成功', $parttime);
    }


    /*
     * 临时工 - 雇主 - 退款提交
     */

    public function RefundSubmit()
    {

        $data = $this->request->param();
        $errorinfo = (new MemberValidate())->goCheck('refund', $data);
        if ($errorinfo !== true) $this->ajaxResult(-1, $errorinfo['msg'], $errorinfo['data']);

        $parttime = Db::table('cmf_parttime')
            ->where('id', $data['job_id'])
            ->field(
                'worker_name,money,title,id,worker_id,boss_id,boss_name,worker_name,title,working_status,order_sn')
            ->find();


        $data['worker_id'] = $this->request->param('worker_id'); //工人id
        $data['job_id'] = $this->request->param('job_id'); //兼职id

        if ($data['money'] > $parttime['money']) {

            $this->ajaxResult(-1, '输入的金额已超出有效金额');
        }
        $up = array(
            'job_id' => $parttime['id'],
            'boss_id' => $parttime['boss_id'],
            'worker_id' => $parttime['worker_id'],
            'order_sn' => $parttime['order_sn'],
            'refund_sn' => '4' . date('YmdHis') . rand(100, 999),
            'money' => $data['money'],
            'boss_name' => $parttime['boss_name'],
            'worker_name' => $parttime['worker_name'],
            'title' => $parttime['title'],
            'refund_type' => $data['type_id'],
            'details' => $data['details'],
            'picture' => isset($data['img'])?json_encode($data['img']):'',
            'create_time' => time(),
            'type' => 1,
        );

        $info = Db::table('cmf_parttime_refund')->insert($up);

        $re = Db::table('cmf_parttime')->where('id', $parttime['id'])->update(['refund_type' => 1]);

        if ($info > 0) {
            $this->ajaxResult(1, '提交退款完成');
        } else {
            $this->ajaxResult(-1, '数据错误');
        }

    }

    /*
     * 临时工 - 雇主 - 退款原因
     */

    public function RefundReason()
    {

        $data = [];
        $refund_type = [1 => '按错不想要了', 2 => '地址和电话信息填写错误', 3 => '协商一致退款', 4 => '不符合要求', 5 => '其他原因'];

        foreach ($refund_type as $k => $item) {

            $data[] = ['type_id' => $k, 'type' => $item];
        }

        $this->ajaxResult(1, '成功', ['refund_type' => $data]);


    }

    /*
     * 临时工 - 雇主 - 退款详情
     */
    public function RefundDetailed()
    {
        $data = $this->request->param();
        $errorinfo = (new MemberValidate())->goCheck('working_status', $data);
        if ($errorinfo !== true) $this->ajaxResult(-1, $errorinfo['msg'], $errorinfo['data']);

        //查看兼职信息

        $parttime = Db::table('cmf_parttime_refund')
            ->alias('p')
            ->join('cmf_member m', 'p.worker_id = m.id', 'LEFT')
            ->where('p.job_id', $data['job_id'])
            ->field('p.worker_name,p.money,p.title,p.id,p.refund_type,p.details,m.avatar,p.picture,type')
            ->find();

        if (!empty($parttime['picture'])) {
            $parttime['picture'] = json_decode($parttime['picture']);
        } else {
            $parttime['picture'] = [];
        }

        $this->ajaxResult(1, '请求成功', $parttime);
    }


    /*
     * 临时工 - 雇主 - 取消退款
     */

    public function CancelRefund()
    {
        $job_id = $this->request->param('job_id');

        $re = Db::table('cmf_parttime')->where('id', $job_id)->update(['refund_type' => 0]);

        $res = Db::table('cmf_parttime_refund')->where('job_id', $job_id)->update(['type' => 0]);


        if ($re > 0 && $res > 0) {
            $this->ajaxResult(1, '取消退款成功');
        } else {
            $this->ajaxResult(-1, '数据有误');
        }
    }

}